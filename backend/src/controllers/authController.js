const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const User = require('../models/User');
const Session = require('../models/Session');

// T·∫°o JWT token
const generateToken = (userId, sessionId) => {
  return jwt.sign({ userId, sessionId }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRE || '15m' // Access token ng·∫Øn h·∫°n
  });
};

// T·∫°o refresh token
const generateRefreshToken = () => {
  return crypto.randomBytes(40).toString('hex');
};

// L·∫•y th√¥ng tin t·ª´ request
const getClientInfo = (req) => {
  const userAgent = req.get('User-Agent') || 'Unknown';
  
  // L·∫•y IP address v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p kh√°c nhau
  let ip = req.ip || 
           req.connection?.remoteAddress || 
           req.socket?.remoteAddress || 
           req.connection?.socket?.remoteAddress ||
           req.headers['x-forwarded-for']?.split(',')[0]?.trim() ||
           req.headers['x-real-ip'] ||
           'Unknown';
  
  // X·ª≠ l√Ω IPv6 mapped IPv4 addresses
  if (ip && ip.startsWith('::ffff:')) {
    ip = ip.substring(7);
  }
  
  // Log ƒë·ªÉ debug
  console.log('üîç Detected IP:', ip, 'User-Agent:', userAgent?.substring(0, 50) + '...');
  
  return { userAgent, ip };
};

// T·∫°o response v·ªõi token v√† session
const createTokenResponse = async (user, statusCode, res, req) => {
  try {
    const { userAgent, ip } = getClientInfo(req);
    
    // T·∫°o refresh token
    const refreshToken = generateRefreshToken();
    
    // Cleanup old sessions tr∆∞·ªõc khi t·∫°o session m·ªõi
    await Session.cleanupOldUserSessions(user._id, 10);
    
    // T·∫°o session m·ªõi
    const session = await Session.create({
      userId: user._id,
      refreshTokenHash: refreshToken, // S·∫Ω ƒë∆∞·ª£c hash trong pre-save middleware
      userAgent,
      ip,
      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 ng√†y
    });

    // T·∫°o access token v·ªõi sessionId
    const accessToken = generateToken(user._id, session._id);
    
    // C·∫≠p nh·∫≠t lastLogin
    user.lastLogin = new Date();
    await user.save();

    res.status(statusCode).json({
      success: true,
      message: statusCode === 201 ? 'ƒêƒÉng k√Ω th√†nh c√¥ng' : 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      accessToken,
      refreshToken,
      user: {
        id: user._id,
        fullName: user.fullName,
        email: user.email,
        avatar: user.avatar,
        role: user.role,
        ngon_ngu: user.ngon_ngu,
        tien_te_mac_dinh: user.tien_te_mac_dinh,
        nhan_email_long_hop: user.nhan_email_long_hop,
        lastLogin: user.lastLogin
      }
    });
  } catch (error) {
    console.error('L·ªói t·∫°o session:', error);
    throw error;
  }
};

// @desc    ƒêƒÉng k√Ω user m·ªõi
// @route   POST /api/auth/register
// @access  Public
const register = async (req, res) => {
  try {
    const { fullName, email, password, confirmPassword, ngon_ngu, tien_te_mac_dinh, nhan_email_long_hop } = req.body;

    // Validation
    if (!fullName || !email || !password || !confirmPassword) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin'
      });
    }

    if (password !== confirmPassword) {
      return res.status(400).json({
        success: false,
        message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp'
      });
    }

    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
      });
    }

    // Validation cho c√°c tr∆∞·ªùng m·ªõi (optional)
    if (ngon_ngu && !['vi', 'en-US'].includes(ngon_ngu)) {
      return res.status(400).json({
        success: false,
        message: 'Ng√¥n ng·ªØ kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£ "vi" ho·∫∑c "en-US"'
      });
    }

    if (tien_te_mac_dinh && !['VND', 'USD', 'EUR'].includes(tien_te_mac_dinh)) {
      return res.status(400).json({
        success: false,
        message: 'Ti·ªÅn t·ªá kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£ "VND", "USD" ho·∫∑c "EUR"'
      });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      });
    }

    // T·∫°o user m·ªõi
    const userData = {
      fullName: fullName.trim(),
      email: email.toLowerCase().trim(),
      password
    };

    // Th√™m c√°c tr∆∞·ªùng optional n·∫øu ƒë∆∞·ª£c cung c·∫•p
    if (ngon_ngu) userData.ngon_ngu = ngon_ngu;
    if (tien_te_mac_dinh) userData.tien_te_mac_dinh = tien_te_mac_dinh;
    if (nhan_email_long_hop !== undefined) userData.nhan_email_long_hop = nhan_email_long_hop;

    const user = await User.create(userData);

    await createTokenResponse(user, 201, res, req);

  } catch (error) {
    console.error('L·ªói register:', error);
    
    // X·ª≠ l√Ω l·ªói validation c·ªßa mongoose
    if (error.name === 'ValidationError') {
      const messages = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({
        success: false,
        message: messages[0]
      });
    }

    // X·ª≠ l√Ω l·ªói duplicate key (email ƒë√£ t·ªìn t·∫°i)
    if (error.code === 11000) {
      return res.status(400).json({
        success: false,
        message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// @desc    ƒêƒÉng nh·∫≠p user
// @route   POST /api/auth/login
// @access  Public
const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Validation
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u'
      });
    }

    // T√¨m user v√† bao g·ªìm password ƒë·ªÉ so s√°nh
    const user = await User.findByEmailWithPassword(email.toLowerCase().trim());
    
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
      });
    }

    // Ki·ªÉm tra t√†i kho·∫£n c√≥ active kh√¥ng
    if (!user.isActive) {
      return res.status(401).json({
        success: false,
        message: 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
      });
    }

    // So s√°nh password
    const isPasswordValid = await user.comparePassword(password);
    
    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
      });
    }

    await createTokenResponse(user, 200, res, req);

  } catch (error) {
    console.error('L·ªói login:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// @desc    L·∫•y th√¥ng tin user hi·ªán t·∫°i
// @route   GET /api/auth/me
// @access  Private
const getMe = async (req, res) => {
  try {
    const user = await User.findById(req.user.userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    res.status(200).json({
      success: true,
      user: {
        id: user._id,
        fullName: user.fullName,
        email: user.email,
        avatar: user.avatar,
        role: user.role,
        ngon_ngu: user.ngon_ngu,
        tien_te_mac_dinh: user.tien_te_mac_dinh,
        nhan_email_long_hop: user.nhan_email_long_hop,
        lastLogin: user.lastLogin,
        createdAt: user.createdAt
      }
    });

  } catch (error) {
    console.error('L·ªói getMe:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// @desc    Refresh access token
// @route   POST /api/auth/refresh
// @access  Public
const refreshToken = async (req, res) => {
  try {
    const { refreshToken } = req.body;

    if (!refreshToken) {
      return res.status(401).json({
        success: false,
        message: 'Refresh token l√† b·∫Øt bu·ªôc'
      });
    }

    // T√¨m session v·ªõi refresh token
    const sessions = await Session.find({ revoked: false }).select('+refreshTokenHash');
    let validSession = null;

    // Ki·ªÉm tra refresh token v·ªõi t·ª´ng session
    for (const session of sessions) {
      if (await session.compareRefreshToken(refreshToken)) {
        validSession = session;
        break;
      }
    }

    if (!validSession || !validSession.isValid()) {
      return res.status(401).json({
        success: false,
        message: 'Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n'
      });
    }

    // T√¨m user
    const user = await User.findById(validSession.userId);
    if (!user || !user.isActive) {
      return res.status(401).json({
        success: false,
        message: 'User kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
      });
    }

    // C·∫≠p nh·∫≠t last used time
    await validSession.updateLastUsed();

    // T·∫°o access token m·ªõi
    const newAccessToken = generateToken(user._id, validSession._id);

    res.status(200).json({
      success: true,
      message: 'Refresh token th√†nh c√¥ng',
      accessToken: newAccessToken,
      user: {
        id: user._id,
        fullName: user.fullName,
        email: user.email,
        avatar: user.avatar,
        role: user.role,
        ngon_ngu: user.ngon_ngu,
        tien_te_mac_dinh: user.tien_te_mac_dinh,
        nhan_email_long_hop: user.nhan_email_long_hop
      }
    });

  } catch (error) {
    console.error('L·ªói refresh token:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// @desc    ƒêƒÉng xu·∫•t
// @route   POST /api/auth/logout
// @access  Private
const logout = async (req, res) => {
  try {
    const { sessionId } = req.user;

    if (sessionId) {
      // Revoke session hi·ªán t·∫°i
      const session = await Session.findById(sessionId);
      if (session) {
        await session.revoke();
      }
    }

    res.status(200).json({
      success: true,
      message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('L·ªói logout:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// @desc    ƒêƒÉng xu·∫•t t·∫•t c·∫£ thi·∫øt b·ªã
// @route   POST /api/auth/logout-all
// @access  Private
const logoutAll = async (req, res) => {
  try {
    const { userId } = req.user;

    // Revoke t·∫•t c·∫£ sessions c·ªßa user
    await Session.revokeAllUserSessions(userId);

    res.status(200).json({
      success: true,
      message: 'ƒêƒÉng xu·∫•t t·∫•t c·∫£ thi·∫øt b·ªã th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('L·ªói logout all:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// @desc    L·∫•y danh s√°ch sessions ƒëang ho·∫°t ƒë·ªông
// @route   GET /api/auth/sessions
// @access  Private
const getActiveSessions = async (req, res) => {
  try {
    const { userId } = req.user;

    const sessions = await Session.getUserActiveSessions(userId);

    const formattedSessions = sessions.map(session => ({
      id: session._id,
      userAgent: session.userAgent,
      ip: session.ip,
      lastUsedAt: session.lastUsedAt,
      expiresAt: session.expiresAt,
      isCurrent: session._id.toString() === req.user.sessionId
    }));

    res.status(200).json({
      success: true,
      sessions: formattedSessions
    });

  } catch (error) {
    console.error('L·ªói get active sessions:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// @desc    Revoke m·ªôt session c·ª• th·ªÉ
// @route   DELETE /api/auth/sessions/:sessionId
// @access  Private
const revokeSession = async (req, res) => {
  try {
    const { sessionId } = req.params;
    const { userId } = req.user;

    const session = await Session.findOne({ _id: sessionId, userId });

    if (!session) {
      return res.status(404).json({
        success: false,
        message: 'Session kh√¥ng t·ªìn t·∫°i'
      });
    }

    await session.revoke();

    res.status(200).json({
      success: true,
      message: 'Revoke session th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('L·ªói revoke session:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

// @desc    C·∫≠p nh·∫≠t th√¥ng tin user
// @route   PUT /api/auth/profile
// @access  Private
const updateProfile = async (req, res) => {
  try {
    const { fullName, ngon_ngu, tien_te_mac_dinh, nhan_email_long_hop } = req.body;
    
    const user = await User.findById(req.user.userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    // Validation cho c√°c tr∆∞·ªùng m·ªõi
    if (ngon_ngu && !['vi', 'en-US'].includes(ngon_ngu)) {
      return res.status(400).json({
        success: false,
        message: 'Ng√¥n ng·ªØ kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£ "vi" ho·∫∑c "en-US"'
      });
    }

    if (tien_te_mac_dinh && !['VND', 'USD', 'EUR'].includes(tien_te_mac_dinh)) {
      return res.status(400).json({
        success: false,
        message: 'Ti·ªÅn t·ªá kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£ "VND", "USD" ho·∫∑c "EUR"'
      });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin
    if (fullName) user.fullName = fullName.trim();
    if (ngon_ngu) user.ngon_ngu = ngon_ngu;
    if (tien_te_mac_dinh) user.tien_te_mac_dinh = tien_te_mac_dinh;
    if (nhan_email_long_hop !== undefined) user.nhan_email_long_hop = nhan_email_long_hop;

    await user.save();

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
      user: {
        id: user._id,
        fullName: user.fullName,
        email: user.email,
        avatar: user.avatar,
        role: user.role,
        ngon_ngu: user.ngon_ngu,
        tien_te_mac_dinh: user.tien_te_mac_dinh,
        nhan_email_long_hop: user.nhan_email_long_hop
      }
    });

  } catch (error) {
    console.error('L·ªói updateProfile:', error);
    
    if (error.name === 'ValidationError') {
      const messages = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({
        success: false,
        message: messages[0]
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau'
    });
  }
};

module.exports = {
  register,
  login,
  refreshToken,
  getMe,
  logout,
  logoutAll,
  getActiveSessions,
  revokeSession,
  updateProfile
};
